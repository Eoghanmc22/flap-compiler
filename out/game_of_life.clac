: comment Compiled using Eoghan's flap to clac compiler https://github.com/Eoghanmc22/flap-compiler ;

: comment flap source code:
    const int DIMENSION = 7;
    //const int LEN = DIMENSION * DIMENSION;
    const int LEN = 49;
    const int SEED_HIGH = 0b0000000000000000100;
    const int SEED_LOW = 0b000011000010100000000000000000;
    
    int get_cell_index(int x, int y) {
      x + DIMENSION * y
    }
    
    // Returns 1 if the cell at index x, y is alive
    // Returns 0 otherwise
    int get_cell_state(int data_high, int data_low, int x, int y) {
      int index = get_cell_index(x, y);
    
      if (index >= 30) {
        int index = index - 30;
        (data_high >> index) & 1
      } else {
        (data_low >> index) & 1
      }
    }
    
    // Adds `by` to `pos` mod `DIMENSION`
    int offset(int pos, int by) {
      if (by >= 0) {
        (pos + by) % DIMENSION
      } else {
        (pos + DIMENSION + by) % DIMENSION
      }
    }
    
    int idx_to_x(int idx) {
      idx % DIMENSION
    }
    
    int idx_to_y(int idx) {
      idx / DIMENSION
    }
    
    int update_cell(int data_high, int data_low, int x, int y) {
      int neighbors = 
              get_cell_state(data_high, data_low, offset(x, -1), offset(y, -1))
              + get_cell_state(data_high, data_low, offset(x, 0), offset(y, -1))
              + get_cell_state(data_high, data_low, offset(x, 1), offset(y, -1))
              + get_cell_state(data_high, data_low, offset(x, -1), offset(y, 0))
              + get_cell_state(data_high, data_low, offset(x, 1), offset(y, 0))
              + get_cell_state(data_high, data_low, offset(x, -1), offset(y, 1))
              + get_cell_state(data_high, data_low, offset(x, 0), offset(y, 1))
              + get_cell_state(data_high, data_low, offset(x, 1), offset(y, 1));
    
      int is_alive = get_cell_state(data_high, data_low, x, y);
    
      if (neighbors < 2) {
        0
      } else if (neighbors == 2) {
        is_alive
      } else if (neighbors == 3) {
        1
      } else {
        0
      }
    }
    
    int compute_next_data_low(int last_data_high, int last_data_low, int next_data_low, int idx) {
      if (idx < 30) {
        int x = idx_to_x(idx);
        int y = idx_to_y(idx);
    
        int next_data_low = next_data_low + (update_cell(last_data_high, last_data_low, x, y) << idx);
    
        compute_next_data_low(last_data_high, last_data_low, next_data_low, idx + 1)
      } else {
        next_data_low
      }
    }
    
    int compute_next_data_high(int last_data_high, int last_data_low, int next_data_high, int idx) {
      if (idx + 30 < LEN) {
        int x = idx_to_x(idx + 30);
        int y = idx_to_y(idx + 30);
    
        int next_data_high = next_data_high + (update_cell(last_data_high, last_data_low, x, y) << idx);
    
        compute_next_data_high(last_data_high, last_data_low, next_data_high, idx + 1)
      } else {
        next_data_high
      }
    }
    
    int make_decimal_row(int data_high, int data_low, int x, int y, int row) {
      if (x < DIMENSION) {
        // int row = row + (1 + 7 * get_cell_state(data_high, data_low, x, y)) * (10 ** x);
        int row = row + (8 - 7 * get_cell_state(data_high, data_low, x, y)) * (10 ** x);
      
        make_decimal_row(data_high, data_low, x + 1, y, row)
      } else {
        row
      }
    }
    
    void print_game(int data_high, int data_low, int y) {
      if (y < DIMENSION) {
        int row = make_decimal_row(data_high, data_low, 0, y, 0);
    
        print(row);
      
        print_game(data_high, data_low, y + 1);
      }
    }
    
    void game_loop(int data_high, int data_low) {
      print_game(data_high, data_low, 0);
    
      // Emulate new lines
      print(0);
      print(0);
      print(0);
    
      int next_data_low = compute_next_data_low(data_high, data_low, 0, 0);
      int next_data_high = compute_next_data_high(data_high, data_low, 0, 0);
    
      // Recursion goes brrrr
      game_loop(next_data_high, next_data_low);
    }
    
    game_loop(SEED_HIGH, SEED_LOW);
;

: comment Start Definitions ;
: const-DIMENSION-0 7 ;
: const-LEN-1 49 ;
: const-SEED_HIGH-2 4 ;
: const-SEED_LOW-3 50987008 ;
: func-get_cell_index-6 const-DIMENSION-0 2 pick * 3 pick 2 pick + 1 pick swap drop swap drop swap drop swap drop ;
: func-on_true-8 2 pick 30 - 7 pick 2 pick 2 swap ** / 1 pick 0 2 pick 2 % + 1 pick swap drop swap drop swap drop swap drop ;
: func-on_false-9 5 pick 3 pick 2 swap ** / 1 pick 0 2 pick 2 % + 1 pick swap drop swap drop swap drop ;
: func-get_cell_state-7 2 pick 2 pick func-get_cell_index-6 1 2 pick 30 < - 1 pick if func-on_true-8 1 skip func-on_false-9 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_true-11 3 pick 3 pick + 1 pick const-DIMENSION-0 % 1 pick swap drop swap drop ;
: func-on_false-12 3 pick const-DIMENSION-0 + 1 pick 4 pick + 1 pick const-DIMENSION-0 % 1 pick swap drop swap drop swap drop ;
: func-offset-10 1 2 pick 0 < - 1 pick if func-on_true-11 1 skip func-on_false-12 1 pick swap drop swap drop swap drop swap drop ;
: func-idx_to_x-13 1 pick const-DIMENSION-0 % 1 pick swap drop swap drop ;
: func-idx_to_y-14 1 pick const-DIMENSION-0 / 1 pick swap drop swap drop ;
: func-on_true-16 0 ;
: func-on_true-18 3 pick ;
: func-on_true-20 1 ;
: func-on_false-21 0 ;
: func-on_false-19 4 pick 3 - if 0 1 skip 1 1 pick if func-on_true-20 1 skip func-on_false-21 1 pick swap drop swap drop ;
: func-on_false-17 3 pick 2 - if 0 1 skip 1 1 pick if func-on_true-18 1 skip func-on_false-19 1 pick swap drop swap drop ;
: func-update_cell-15 0 1 - 3 pick 2 pick func-offset-10 0 1 - 4 pick 2 pick func-offset-10 8 pick 8 pick 5 pick 4 pick func-get_cell_state-7 7 pick 0 func-offset-10 0 1 - 8 pick 2 pick func-offset-10 12 pick 12 pick 5 pick 4 pick func-get_cell_state-7 5 pick 2 pick + 12 pick 1 func-offset-10 0 1 - 13 pick 2 pick func-offset-10 17 pick 17 pick 5 pick 4 pick func-get_cell_state-7 5 pick 2 pick + 0 1 - 18 pick 2 pick func-offset-10 18 pick 0 func-offset-10 22 pick 22 pick 4 pick 4 pick func-get_cell_state-7 5 pick 2 pick + 22 pick 1 func-offset-10 22 pick 0 func-offset-10 26 pick 26 pick 4 pick 4 pick func-get_cell_state-7 4 pick 2 pick + 0 1 - 27 pick 2 pick func-offset-10 27 pick 1 func-offset-10 31 pick 31 pick 4 pick 4 pick func-get_cell_state-7 5 pick 2 pick + 31 pick 0 func-offset-10 31 pick 1 func-offset-10 35 pick 35 pick 4 pick 4 pick func-get_cell_state-7 4 pick 2 pick + 35 pick 1 func-offset-10 35 pick 1 func-offset-10 39 pick 39 pick 4 pick 4 pick func-get_cell_state-7 4 pick 2 pick + 41 pick 41 pick 41 pick 41 pick func-get_cell_state-7 2 pick 2 < 1 pick if func-on_true-16 1 skip func-on_false-17 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_true-23 2 pick func-idx_to_x-13 3 pick func-idx_to_y-14 7 pick 7 pick 4 pick 4 pick func-update_cell-15 1 pick 6 pick 2 swap ** * 7 pick 2 pick + 7 pick 1 + 11 pick 11 pick 4 pick 4 pick func-compute_next_data_low-22 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_false-24 3 pick ;
: func-compute_next_data_low-22 1 pick 30 < 1 pick if func-on_true-23 1 skip func-on_false-24 1 pick swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_true-26 3 pick 30 + 1 pick func-idx_to_x-13 5 pick 30 + 1 pick func-idx_to_y-14 10 pick 10 pick 5 pick 4 pick func-update_cell-15 1 pick 9 pick 2 swap ** * 10 pick 2 pick + 10 pick 1 + 14 pick 14 pick 4 pick 4 pick func-compute_next_data_high-25 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_false-27 4 pick ;
: func-compute_next_data_high-25 1 pick 30 + 1 pick const-LEN-1 < 1 pick if func-on_true-26 1 skip func-on_false-27 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_true-29 6 pick 6 pick 6 pick 6 pick func-get_cell_state-7 7 2 pick * 8 2 pick - 10 8 pick ** 2 pick 2 pick * 7 pick 2 pick + 10 pick 1 + 13 pick 13 pick 3 pick 13 pick 6 pick func-make_decimal_row-28 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_false-30 2 pick ;
: func-make_decimal_row-28 3 pick const-DIMENSION-0 < 1 pick if func-on_true-29 1 skip func-on_false-30 1 pick swap drop swap drop swap drop swap drop swap drop swap drop swap drop ;
: func-on_true-32 4 pick 4 pick 0 5 pick 0 func-make_decimal_row-28 1 pick print 3 pick 1 + 6 pick 6 pick 3 pick func-print_game-31 drop drop ;
: func-print_game-31 1 pick const-DIMENSION-0 < 1 pick if func-on_true-32 0 skip drop drop drop drop ;
: func-game_loop-33 2 pick 2 pick 0 func-print_game-31 0 print 0 print 0 print 2 pick 2 pick 0 0 func-compute_next_data_low-22 3 pick 3 pick 0 0 func-compute_next_data_high-25 1 pick 3 pick func-game_loop-33 drop drop drop drop ;

: comment Start Main ;
const-SEED_HIGH-2 const-SEED_LOW-3 func-game_loop-33
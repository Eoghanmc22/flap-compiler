// TODO: Structs, Arrays, special syntax for builtins?

multiline_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
singleline_comment = _{ "//" ~ (!"\n" ~ ANY)* }
COMMENT = _{ multiline_comment | singleline_comment }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

number = @{ ASCII_DIGIT+ | ("0x" ~ ASCII_HEX_DIGIT+) | ("0b" ~ ASCII_BIN_DIGIT+) | ("0o" ~ ASCII_OCT_DIGIT+) }
true = { "true" }
false = { "false" }
boolean = @{ true | false }
value = { number | boolean }

ident_start_chars = { ASCII_ALPHA | "_" }
ident_chars = { ASCII_ALPHANUMERIC | "_" }
ident = @{ ident_start_chars+ ~ ident_chars* }

int_type = { "int" }
bool_type = { "bool" }
var_type = { int_type | bool_type }

// Arithmetic operators
add = { "+" }
subtract = { "-" }
negate = { "-" }
multiply = { "*" }
divide = { "/" }
modulo = { "%" }
power = { "**" }

// Comparison operators
eq = { "==" }
ne = { "!=" }
le = { "<=" }  // Must come before "<" to avoid tokenizing "<=" as "<" + "="
ge = { ">=" }  // Must come before ">" to avoid tokenizing ">=" as ">" + "="
lt = { "<" }
gt = { ">" }

// Logical operators
logical_and = { "&&" }
logical_or = { "||" }
logical_not = { "!" }

binary_op = _{ add | subtract | power | multiply | divide | modulo | eq | ne | le | ge | lt | gt | logical_and | logical_or }
unary_op = _{ negate | logical_not }
atom = _{ if_statement | function_call | value | ident | ( "(" ~ expression ~ ")") }
expression = { unary_op? ~ atom ~ (binary_op ~ unary_op? ~atom)* }

// A static_var can only take on the value of a literal
// static_var = { "static" ~ var_type ~ "=" ~ expression }
static_var = { "static" ~ var_type ~ ident ~ "=" ~ value }
local_var = { var_type ~ ident ~ "=" ~ expression }

function_parameters = _{ ( expression ~ ("," ~ expression)* )? }
function_call = { ident ~ "(" ~ function_parameters ~ ")"  }

if_block = { "if" ~ "(" ~ expression ~ ")" ~ block }
if_else_block = _{ "else" ~ if_block }
else_block = { "else" ~ block }
if_statement = { if_block ~ if_else_block* ~ else_block? }

semicolon = { ";" }
statement = _{ (static_var | local_var | expression) ~ semicolon | function_def }

no_mangle = { "no_mangle" }
function_attr = { no_mangle }
function_attrs = _{ ("#" ~ "[" ~ function_attr ~ "]")* }
function_parameters_def = _{ ( var_type ~ ident ~ ("," ~ var_type ~ ident)* )? }
function_def = { function_attrs ~ var_type ~ ident ~ "(" ~ function_parameters_def ~ ")" ~ block }

block = { "{" ~ code ~ "}" | statement | expression }
code = _{ statement* ~ expression? }

// program_contents = { code }
program = { SOI ~ code ~ EOI }
